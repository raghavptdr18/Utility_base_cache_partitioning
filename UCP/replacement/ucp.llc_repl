/* CS204 - Project
Dated - 12 May 2022
Computer Architecture and Organization
    Submitted By -
    Abhay Shukralia (2020csb1061)
    Raghav Patidar (2020csb1115)
    Rohan Khanna (2020csb1117)
    Vibhav Goriya (2020csb1139)
    Vijay Dwivedi (2020csb1140) */


#include "cache.h"
#include "atd.h"

int c1 = 4;  // Initial partition of core1
int c2 = 12; // Initial partition of core2

// initialize replacement state
ATD array1[32][16]; // For core 1
ATD array2[32][16]; // For core 2
int ct1[16] = {0};  // initiallizing count array of hits in ATD1
int ct2[16] = {0};  // initiallizing count array of hits in ATD2

void CACHE::llc_initialize_replacement()
{
    for (int i = 0; i < 32; i++)   // initillizing ATD1 values by 32 sets of memory
    {
        for (int j = 0; j < 16; j++)
        {
            if (block[i][j].valid == 1)
            {
                array1[i][j].tag = block[i][j].address;
                array1[i][j].valid = 1;
                array1[i][j].lru = block[i][j].lru;
            }
        }
    }

    for (int i = 32; i < 64; i++)  // initillizing ATD2 values by another 32 sets of memory
    {
        for (int j = 0; j < 16; j++)
        {
            if (block[i][j].valid == 1)
            {
                array2[i][j].tag = block[i][j].address;
                array2[i][j].valid = 1;
                array2[i][j].lru = block[i][j].lru;
            }
        }
    }

    for (int i = 0; i < 4096; i++)  // total sets = 4096 and total ways = 16 , initiallize lru value to 0
    {
        for (int j = 0; j < 16; j++)
        {
            block[i][j].lru = 0;
        }
    }
}

// find replacement victim
uint32_t CACHE::llc_find_victim(uint32_t cpu, uint64_t instr_id, uint32_t set, const BLOCK *current_set, uint64_t ip, uint64_t full_addr, uint32_t type)
{
    int cnt1 = 0; // counting number of blocks associated with core 1
    int cnt2 = 0; // counting number of blocks associated with core 2
   
    for (int i = 0; i < LLC_WAY; i++) // if block is valid , then we increment the block counter associated with particular core
    {
        if (block[set][i].cpu == 0 && block[set][i].valid == true)
        {
            cnt1++;
        }
        else if (block[set][i].cpu == 1 && block[set][i].valid == true)
        {
            cnt2++;
        }
    }

    if (cpu == 0) // if core requesting is 1
    {

        // we are checking if any space in set is empty or not , if empty we put the incoming block directly in set and return way
        for (int i = 0; i < LLC_WAY; i++)
        {
            if (block[set][i].valid == false)
            {
                DP(if (warmup_complete[cpu]) {
                   cout << "[" << NAME << "] " << _func_ << " instr_id: " << instr_id << " invalid set: " << set << " way: " << i;
                   cout << hex << " address: " << (full_addr>>LOG2_BLOCK_SIZE) << " victim address: " << block[set][i].address << " data: " << block[set][i].data;
                   cout << dec << " lru: " << block[set][i].lru << endl; });
                block[set][i].cpu = 0;  // updating the core associated with block
                array1[set % 32][i].tag = full_addr;  //updating the ATD tag part
                array1[set % 32][i].valid = 1;  // updating valid bit
                array1[set % 32][i].lru = 0;   //updating lru
                return i;  // returning way
            }
        }
        int mx_lru = 0;  
        if (cnt1 >= c1) // if cores associated with core 1 is greater than or equalls to ways associated to core 1 
        {
            //finding the maximum lru 
            for (int i = 0; i < LLC_WAY; i++)
            {
                if (block[set][i].cpu == 0 && block[set][i].valid == true) // if block is valid and core associated with it is 1
                {
                    if (block[set][i].lru > (mx_lru))
                    {
                        mx_lru = block[set][i].lru; 
                    }
                }
            }
        }
        else // if cores associated with core 1 is less than ways associated to core 1 
        {
            //finding the maximum lru 
            for (int i = 0; i < LLC_WAY; i++)
            {
                if (block[set][i].cpu == 1 && block[set][i].valid == true) // if block is valid and core associated with it is 2
                {
                    if (block[set][i].lru >= mx_lru)
                    {
                        mx_lru = block[set][i].lru;
                    }
                }
            }
        }

        for (int i = 0; i < LLC_WAY; i++) 
        {
            if (block[set][i].lru == mx_lru)  // if the block is lru 
            {
                DP(if (warmup_complete[cpu]) {
                   cout << "[" << NAME << "] " << _func_ << " instr_id: " << instr_id << " invalid set: " << set << " way: " << i;
                   cout << hex << " address: " << (full_addr>>LOG2_BLOCK_SIZE) << " victim address: " << block[set][i].address << " data: " << block[set][i].data;
                   cout << dec << " lru: " << block[set][i].lru << endl; });
                block[set][i].cpu = 0;  // current block requested by core 1 , so we update it
                array1[set % 32][i].tag = full_addr; // ATD is updated to current address
                array1[set % 32][i].valid = 1;  // Updating the valid bit
                array1[set % 32][i].lru = 0;   // Updating the lru of ATD to 0
                return i; // reutning the way of victim
            }
        }
    }

    else if (cpu == 1) // if core requesting is 2
    {
        // we are checking if any space in set is empty or not , if empty we put the incoming block directly in set and return way
        for (int i = 0; i < LLC_WAY; i++)
        {
            if (block[set][i].valid == false)
            {
                DP(if (warmup_complete[cpu]) {
                   cout << "[" << NAME << "] " << _func_ << " instr_id: " << instr_id << " invalid set: " << set << " way: " << i;
                   cout << hex << " address: " << (full_addr>>LOG2_BLOCK_SIZE) << " victim address: " << block[set][way].address << " data: " << block[set][i].data;
                   cout << dec << " lru: " << block[set][i].lru << endl; });
                block[set][i].cpu = 1; // updating the core associated with block
                array2[set % 32][i].tag = full_addr;  //updating the ATD tag part
                array2[set % 32][i].valid = 1;   // updating valid bit
                array2[set % 32][i].lru = 0;   // Updating the lru of ATD to 0
                return i;  // reutning the way of victim
            }
        }
        int mx_lru = 0;
        if (cnt2 >= c2) // if cores associated with core 2 is greater than or equalls to ways associated to core 2
        {
            //finding the maximum lru 
            for (int i = 0; i < LLC_WAY; i++)
            {
                if (block[set][i].cpu == 1 && block[set][i].valid == true)
                {
                    if (block[set][i].lru >= mx_lru)
                    {
                        mx_lru = block[set][i].lru;
                    }
                }
            }
        }
        else // if cores associated with core 2 is less than ways associated to core 2
        {
            //finding the maximum lru
            for (int i = 0; i < LLC_WAY; i++)
            {
                if (block[set][i].cpu == 0 && block[set][i].valid == true)
                {
                    if (block[set][i].lru >= mx_lru)
                    {
                        mx_lru = block[set][i].lru;
                    }
                }
            }
        }
         
        for (int i = 0; i < LLC_WAY; i++)
        {
            if (block[set][i].lru == mx_lru)  // if the block is lru 
            {
                DP(if (warmup_complete[cpu]) {
                   cout << "[" << NAME << "] " << _func_ << " instr_id: " << instr_id << " invalid set: " << set << " way: " << way;
                   cout << hex << " address: " << (full_addr>>LOG2_BLOCK_SIZE) << " victim address: " << block[set][way].address << " data: " << block[set][way].data;
                   cout << dec << " lru: " << block[set][way].lru << endl; });
                block[set][i].cpu = 1; // current block requested by core 2 , so we update it
                array2[set % 32][i].tag = full_addr; //updating the ATD tag part
                array2[set % 32][i].valid = 1;  // updating valid bit
                array2[set % 32][i].lru = 0;  // Updating the lru of ATD to 0
                return i;   // reutning the way of victim
            }
        }
    }

    // WE SHOULD NOT REACH HERE
    assert(0);
    return 0;
}

// called on every cache hit and cache fill
void CACHE::llc_update_replacement_state(uint32_t cpu, uint32_t set, uint32_t way, uint64_t full_addr, uint64_t ip, uint64_t victim_addr, uint32_t type, uint8_t hit)
{
    string TYPE_NAME;
    if (type == LOAD)
        TYPE_NAME = "LOAD";
    else if (type == RFO)
        TYPE_NAME = "RFO";
    else if (type == PREFETCH)
        TYPE_NAME = "PF";
    else if (type == WRITEBACK)
        TYPE_NAME = "WB";
    else
        assert(0);

    if (hit)
        TYPE_NAME += "_HIT";
    else
        TYPE_NAME += "_MISS";

    if ((type == WRITEBACK) && ip)
        assert(0);


    if (hit && (type == WRITEBACK)) // writeback hit does not update LRU state
        return;

    if (cpu == 0 && hit)  // if core 1 request and it is hit
    {
        int setindex = 0;
        // here we find the set index of the block
        for (int i = 0; i < 32; i++)
        {
            for (int j = 0; j < 16; j++)
            {
                if (block[set][way].full_addr == array1[i][j].tag)
                {
                    setindex = i;   
                    break;
                }
            }
        }
        for (int i = 0; i < 16; i++)
        {
            if (array1[setindex][i].lru != block[set][way].lru)  // in a particular set of ATD if lru of of array 1 is not eualls to lru of block then we update lru 
            {
                array1[setindex][i].lru++;
            }
            else // if LRU of ATD is equalls to LRU of block then we update the LRU of ATD to 0
            {
                array1[setindex][i].lru = 0;
                array1[setindex][i].counter++;  // increment the counter of the way by 1
                ct1[i] = array1[setindex][i].counter; // putting counter value in counter array of ATD1
            }
        }
    }
    else if (cpu == 1 && hit)   // if core 2 request and it is hit
    {
        int setindex = 0;
        // here we find the set index of the block
        for (int i = 0; i < 32; i++)
        {
            for (int j = 0; j < 16; j++)
            {
                if (block[set][way].full_addr == array2[i][j].tag)
                {
                    setindex = i;
                    break;
                }
            }
        }
        for (int i = 0; i < 16; i++)
        {
            if (array2[setindex][i].lru != block[set][way].lru) // in a particular set of ATD if lru of of array 2 is not eualls to lru of block then we update lru 
            {
                array2[setindex][i].lru++;
            }
            else // if LRU of ATD is equalls to LRU of block then we update the LRU of ATD to 0
            {
                array2[setindex][i].lru = 0;
                array2[setindex][i].counter++; // increment the counter of the way by 1
                ct2[i] = array2[setindex][i].counter; // putting counter value in counter array of ATD2
            }
        }
    }

    // for finding maximim utility
    // We will update core partition only after 5000000 cycles
    if (current_core_cycle[0] < 5000000 * call)
    {
        int mxvalue = 0, k = 0, l = 0;
        for (int i = 0; i < 16; i++)
        {
            // Assuming partition i and 15-i, find the number of hits in it using ct1 and ct2 array
            if (ct1[i] + ct2[15 - i] > mxvalue)
            {
                // Find maximum value of sum of hits in all possible partitions
                mxvalue = ct1[i] + ct2[15 - i];
                k = i;
                l = 15 - i;
            }
        }
        // Update core partition values
        c1 = k;
        c2 = l;
        call++; // Update call
    }
    // cerr << "Optimal Partion -> Core1 :" << c1 << ", Core2 :" << c2 << "\n";
    return lru_update(set, way);
}

// use this function to print out your own stats at the end of simulation
void CACHE::llc_replacement_final_stats()
{
}